Leetcode-128. Longest Consecutive Sequence
Code:(Better Approach)
import java.util.Arrays;

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) return 0; // Handle empty array case
        
        // Sort the array
        Arrays.sort(nums);
        
        int longest = 1; // Initialize longest to at least 1
        int count = 1;   // Count of current consecutive sequence
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                // Skip duplicates
                continue;
            }
            if (nums[i] == nums[i - 1] + 1) {
                // Increment count if consecutive
                count++;
            } else {
                // Reset count if not consecutive
                count = 1;
            }
            longest = Math.max(longest, count); // Update longest
        }
        
        return longest;
    }
}


Optimal Approach(Using HashSet)

Code:
class Solution {
    // arr[] : the input array 
    // N : size of the array arr[]
    // Function to return length of longest subsequence of consecutive integers.
    static int findLongestConseqSubseq(int arr[], int N) {
        if (N == 0) {
            return 0;
        }

        int longest = 1;
        HashSet<Integer> set = new HashSet<Integer>();

        // Insert all elements of arr into the set.
        for (int i = 0; i < N; i++) {
            set.add(arr[i]);
        }

        // Check for the start of a sequence.
        for (int num : set) {
            // Only start counting if num-1 is not present in the set.
            if (!set.contains(num - 1)) {
                int count = 1;
                int x = num;

                // Increment x and count if consecutive numbers are found.
                while (set.contains(x + 1)) {
                    count++;
                    x = x + 1;
                }

                // Update the longest length found so far.
                longest = Math.max(longest, count);
            }
        }

        return longest;
    }
}

