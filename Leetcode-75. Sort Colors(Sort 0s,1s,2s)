Leetcode-75. Sort Colors(Sort 0s,1s,2s)
Code:(Better Approach)
class Solution {
    public void sortColors(int[] nums) {
         int count0=0;
        int count1=0;
        int count2=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0){
                count0++;
            }
            else if(nums[i]==1){
                count1++;
            }
            else{
                count2++;
            }
        }
        for(int i=0;i<count0;i++){
            nums[i]=0;
        }
        for(int i=count0;i<(count0+count1);i++){
            nums[i]=1;
        }
        for(int i=(count0+count1);i<nums.length;i++){
            nums[i]=2;
        }

    }
}
Optimal Approach(By DNF Algorithm)
class Solution {
    public void sortColors(int[] nums) {
        int low = 0;  // Pointer for 0
        int mid = 0;  // Pointer for current element
        int high = nums.length - 1;  // Pointer for 2

        while (mid <= high) {
            if (nums[mid] == 0) {
                // Swap nums[low] and nums[mid]
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                // Move to the next element
                mid++;
            } else {
                // Swap nums[mid] and nums[high]
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                
                high--;
            }
        }
    }
}

